Name - AVIK PRAMANICK
Roll Number - 23CS60R78

# Complex Networks [CS60078] 2023-24 Assignment 1: Calculating Centrality Measures

Python program to calculate Closeness centrality, Betweenness centrality and PageRank of The Cora dataset (URL mentioned below).

https://linqs.org/datasets/#cora

#### Programming Languages Used
* Python (version 3.8.10)

#### Libraries Used
* numpy
* pandas
* os
* collections
* sys
In case of any missing library kindly install it using command - pip3 install <library name>
(Some libraries mentioned above comes as part of python3)

### Role of gen_centrality.py
To read the file cora.cites and create a graph representation. Use the graph to calculate the closeness centrality, betweenness centrality and PageRank of each node.
The result is then stored in folder 'centralities', in descending order as per value.

## Running it locally on your machine

1. Clone this repository, and cd to the project root (where gen_centrality.py is present)
2. Put the data cora.cites as cora/cora.cites, where cora is the folder name and cora.cites is the input file.
3. Run python3 gen_centrality.py

## Assumptions made
1. Let's say, node A and B are connected => "A->B" and the node B has no outdegree. In this particular case, added an edge from node B to node A 
    (i.e., "B->A"). If say, node B has no outdegree, and has a lot of incomming edges say from A,C,D,etc , then added edges from B to A,C,D,etc.
2. If we get an unreachable node in closeness centrality, then we are taking the distance of those nodes to be the number of nodes present (2708). 
    This is because taking a very large value say 10,00,000 results in mostly zeros being present in result (as we are considering only 6 digits after 
    decimal).
3. If the page rank does not converge at 6 decimal place by iteration 50 of the loop, then stop the loop.
4. The output file is sorted as per descending value.

## Time taken to execute the program
Total time taken is approximately 3 hours and 30 minutes

